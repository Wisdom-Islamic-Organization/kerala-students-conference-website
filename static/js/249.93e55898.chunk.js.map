{"version":3,"file":"static/js/249.93e55898.chunk.js","mappings":"qJAEO,MAAMA,GAAYC,EAAAA,EAAAA,IAAO,MAAPA,CAAaC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,0EAMzBC,GAAcH,EAAAA,EAAAA,IAAO,QAAPA,CAAeI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,kC,WCNXF,EAAAA,EAAAA,IAAO,MAAPA,CAAaC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,wGAOdF,EAAAA,EAAAA,IAAO,WAAPA,CAAkBI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,qEAPzC,MAaMG,GAAQL,EAAAA,EAAAA,IAAO,QAAPA,CAAeM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,qF,aCVpC,MAYA,GAAeK,EAAAA,EAAAA,IAAf,EAZcC,IAAA,IAAC,KAAEC,EAAI,YAAEC,EAAW,SAAEC,EAAQ,EAAEC,GAAeJ,EAAA,OAC3DK,EAAAA,EAAAA,MAACd,EAAS,CAAAe,SAAA,EACRC,EAAAA,EAAAA,KAACV,EAAK,CAACW,QAASP,EAAKK,SAAEF,EAAEF,MACzBK,EAAAA,EAAAA,KAACZ,EAAW,CACVO,YAAaE,EAAEF,GACfD,KAAMA,EACNQ,GAAIR,EACJE,SAAUA,MAEF,G,qHCRd,MAWMO,GAAMC,EAAAA,EAAAA,IAXW,CACrBC,OAAQC,0CACRC,WAAYD,6CACZE,UAAWF,6BACXG,cAAeH,iDACfI,kBAAmBJ,cACnBK,MAAOL,2CACPM,cAAeN,iBAQXO,IADYC,EAAAA,EAAAA,IAAaX,IACpBY,EAAAA,EAAAA,IAAaZ,KACXa,EAAAA,EAAAA,IAAQb,IACLc,EAAAA,EAAAA,IAAWd,G,cCM3B,MAAMe,EAAiD,CACrDxB,KAAM,GACNyB,MAAO,GACPC,IAAK,GACLC,SAAU,GACVC,OAAQ,GACRC,QAAS,GACTC,YAAa,GACbC,YAAa,GACbC,iBAAkB,GAClBC,SAAU,GACVC,cAAe,GACfC,UAAW,GACXC,cAAe,GACfC,eAAgB,GAChBC,oBAAqB,MAGjBC,EAAuC,CAC3CvC,KAAM,GACNoC,cAAe,IAGJI,EAAU,SACrBC,GAEI,IADJC,EAAoCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,eAEvC,MAAMG,GAAUC,EAAAA,EAAAA,OACTC,EAAWC,IAAgBC,EAAAA,EAAAA,UAG/B,CACDC,OAAsB,iBAAbT,EAA8BlB,EAA4Be,EACnEa,OAAsB,iBAAbV,EAA8BlB,EAA4Be,IAgHrE,MAAO,CACLc,aAvDAC,IAEA,MAAM,KAAEtD,EAAI,MAAEuD,GAAUD,EAAME,OAC9BP,GAAcQ,IAASC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAClBD,GAAS,IACZN,QAAMO,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACDD,EAAUN,QAAM,IACnB,CAACnD,GAAOuD,IAEVH,QAAMM,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACDD,EAAUL,QAAM,IACnB,CAACpD,GAAO,QAET,EA2CH2D,aAxGmBC,UACnBN,EAAMO,iBACN,MAAMV,EAASH,EAAUG,OACnBC,EAASX,EAASU,GACxBF,GAAcQ,IAASC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAWD,GAAS,IAAEL,aAE7C,IACE,GAAIU,OAAOX,OAAOC,GAAQW,OAAOC,GAAoB,KAAVA,IAAe,CAExD,MAAMC,GAAmBC,EAAAA,EAAAA,IAAW/C,EAAI,uBAClCgD,EAAAA,EAAAA,IAAOF,GAAgBP,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACxBP,GAAM,IACTiB,WAAWC,EAAAA,EAAAA,SAIbpB,EAAa,CACXE,OAAsB,iBAAbT,GAA2BgB,EAAAA,EAAAA,GAAA,GAAQlC,IAAyBkC,EAAAA,EAAAA,GAAA,GAAUnB,GAC/Ea,OAAsB,iBAAbV,GAA2BgB,EAAAA,EAAAA,GAAA,GAAQlC,IAAyBkC,EAAAA,EAAAA,GAAA,GAAUnB,KAxBrF+B,OAAOC,SAAS,CACdC,IAAK,EACLC,SAAU,WA6BRC,YAAW,KACTC,EAAAA,EAAsB,QAAE,CACtBC,QAAS,0BACTC,YAAa,qDACbC,SAAU,GACV,GACD,KAGHJ,YAAW,KACT5B,EAAQiC,KAAK,IAAI,GAChB,KACL,CACF,CAAE,MAAOf,GACPgB,QAAQhB,MAAM,sBAAuBA,GACrCW,EAAAA,EAAoB,MAAE,CACpBC,QAAS,QACTC,YAAa,0DAEjB,GA6DAI,cAzCoBrB,UACpBN,EAAMO,iBACN,MAAMV,EAASH,EAAUG,OACnBC,EAASX,EAASU,GACxBF,GAAcQ,IAASC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAWD,GAAS,IAAEL,aAE7C,IACE,GAAIU,OAAOX,OAAOC,GAAQW,OAAOC,GAAoB,KAAVA,IAAe,CAExD,MAAMkB,GAAchB,EAAAA,EAAAA,IAAW/C,EAAI,kBAC7BgD,EAAAA,EAAAA,IAAOe,EAAa,CACxBlF,KAAMmD,EAAOnD,KACboC,cAAee,EAAOf,cACtBgC,WAAWC,EAAAA,EAAAA,QAIbpB,EAAa,CACXE,QAAMO,EAAAA,EAAAA,GAAA,GAAOnB,GACba,QAAMM,EAAAA,EAAAA,GAAA,GAAOnB,KAIfoC,EAAAA,EAAsB,QAAE,CACtBC,QAAS,eACTC,YAAa,2DACbC,SAAU,GAEd,CACF,CAAE,MAAOd,GACPgB,QAAQhB,MAAM,sBAAuBA,GACrCW,EAAAA,EAAoB,MAAE,CACpBC,QAAS,QACTC,YAAa,mDAEjB,GAOA1B,OAAQH,EAAUG,OAClBC,OAAQJ,EAAUI,OAEtB,C,0CCnLA,MAoCa+B,EAAmBhC,IAC9B,IAAIC,EAAc,CAAC,EASnB,OAPKD,EAAOnD,OACVoD,EAAOpD,KAAO,oBAEXmD,EAAOf,gBACVgB,EAAOhB,cAAgB,8BAGlBgB,CAAM,EAGf,EAjDkBD,IAChB,IAAIC,EAAyB,CAAC,EAgC9B,OA9BKD,EAAOnD,OACVoD,EAAOpD,KAAO,oBAGXmD,EAAOvB,SACVwB,EAAOxB,OAAS,sBAGbuB,EAAOzB,KAED0D,MAAMC,OAAOlC,EAAOzB,OAAS2D,OAAOlC,EAAOzB,KAAO,KAC3D0B,EAAO1B,IAAM,4BAFb0B,EAAO1B,IAAM,kBAKVyB,EAAO1B,MAEA,eAAe6D,KAAKnC,EAAO1B,SACrC2B,EAAO3B,MAAQ,4BAFf2B,EAAO3B,MAAQ,4BAKZ0B,EAAOf,cAEA,WAAWkD,KAAKnC,EAAOf,iBACjCgB,EAAOhB,cAAgB,wCAFvBgB,EAAOhB,cAAgB,6BAKrBe,EAAOd,iBAAmB,WAAWiD,KAAKnC,EAAOd,kBACnDe,EAAOf,eAAiB,wCAGnBe,CAAM,C,yECjCR,MAAMmC,GAAUhG,EAAAA,EAAAA,IAAO,IAAPA,CAAWC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,iCAIrBH,GAAYC,EAAAA,EAAAA,IAAO,MAAPA,CAAaI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,sDAKzB+F,GAAcjG,EAAAA,EAAAA,IAAO,MAAPA,CAAaM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,uD,aCFxC,MAWA,GAAeK,EAAAA,EAAAA,IAAf,EAXcC,IAAmC,IAAlC,MAAE0F,EAAK,QAAEC,EAAO,EAAEvF,GAAUJ,EACzC,OACEK,EAAAA,EAAAA,MAACd,EAAS,CAAAe,SAAA,EACRC,EAAAA,EAAAA,KAAA,MAAAD,SAAKF,EAAEsF,MACPnF,EAAAA,EAAAA,KAACkF,EAAW,CAAAnF,UACVC,EAAAA,EAAAA,KAACiF,EAAO,CAAAlF,SAAEF,EAAEuF,SAEJ,G,uKCdT,MAAMC,GAAmBpG,EAAAA,EAAAA,IAAO,MAAPA,CAAaC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,2GAQhCmG,GAAYrG,EAAAA,EAAAA,IAAO,OAAPA,CAAcI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,mJAU1BoG,GAAOtG,EAAAA,EAAAA,IAAO,OAAPA,CAAcM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,+HAQrBqG,GAAkBvG,EAAAA,EAAAA,IAAO,MAAPA,CAAawG,IAAAA,GAAAtG,EAAAA,EAAAA,GAAA,sI,aCjB5C,MAkDA,GAAeK,EAAAA,EAAAA,IAAf,EAlDgBC,IAA8C,IAA7C,MAAE0F,EAAK,QAAEC,EAAO,GAAElF,EAAE,EAAEL,GAAiBJ,EACtD,MAAM,OAAEoD,EAAM,OAAEC,EAAM,aAAEC,EAAY,cAAE4B,IAAkBzC,EAAAA,EAAAA,GAAQ2C,EAAAA,EAAiB,WAE3Ea,EAAiBC,IAAoC,IAAnC,KAAEC,GAA2BD,EACnD,MAAME,EAAe/C,EAAO8C,GAC5B,OAAO5F,EAAAA,EAAAA,KAACuF,EAAI,CAAAxF,SAAE8F,GAAoB,EAGpC,OACE7F,EAAAA,EAAAA,KAACqF,EAAgB,CAACnF,GAAIA,EAAGH,UACvBD,EAAAA,EAAAA,MAACgG,EAAAA,EAAG,CAACC,QAAQ,gBAAgBC,MAAM,SAAQjG,SAAA,EACzCC,EAAAA,EAAAA,KAACiG,EAAAA,EAAG,CAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAGtG,UAClCC,EAAAA,EAAAA,KAACsG,EAAAA,GAAK,CAACC,UAAU,OAAOC,aAAW,EAAAzG,UACjCC,EAAAA,EAAAA,KAACyG,EAAAA,EAAK,CAACtB,MAAOA,EAAOC,QAASA,SAGlCpF,EAAAA,EAAAA,KAACiG,EAAAA,EAAG,CAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAGtG,UAClCC,EAAAA,EAAAA,KAACsG,EAAAA,GAAK,CAACC,UAAU,QAAQC,aAAW,EAAAzG,UAClCD,EAAAA,EAAAA,MAACwF,EAAS,CAACoB,aAAa,MAAMC,SAAUhC,EAAc5E,SAAA,EACpDD,EAAAA,EAAAA,MAACmG,EAAAA,EAAG,CAACW,KAAM,GAAG7G,SAAA,EACZC,EAAAA,EAAAA,KAAC6G,EAAAA,EAAK,CACJjB,KAAK,OACLlG,KAAK,OACLC,YAAY,YACZsD,MAAOJ,EAAOnD,MAAQ,GACtBE,SAAUmD,KAEZ/C,EAAAA,EAAAA,KAAC0F,EAAc,CAACE,KAAK,aAEvB9F,EAAAA,EAAAA,MAACmG,EAAAA,EAAG,CAACW,KAAM,GAAG7G,SAAA,EACZC,EAAAA,EAAAA,KAAC6G,EAAAA,EAAK,CACJjB,KAAK,MACLlG,KAAK,gBACLC,YAAY,eACZsD,MAAOJ,EAAOf,eAAiB,GAC/BlC,SAAUmD,KAEZ/C,EAAAA,EAAAA,KAAC0F,EAAc,CAACE,KAAK,sBAEvB5F,EAAAA,EAAAA,KAACwF,EAAe,CAAAzF,UACdC,EAAAA,EAAAA,KAAC8G,EAAAA,EAAM,CAACpH,KAAK,SAAQK,SAAEF,EAAE,yBAMlB,G","sources":["common/Input/styles.ts","common/TextArea/styles.tsx","common/Input/index.tsx","config/firebase.js","common/utils/useForm.tsx","common/utils/validationRules.ts","components/Block/styles.ts","components/Block/index.tsx","components/ContactForm/styles.ts","components/ContactForm/index.tsx"],"sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const Container = styled(\"div\")`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 10px 5px;\r\n`;\r\n\r\nexport const StyledInput = styled(\"input\")`\r\n  font-size: 0.875rem;\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledContainer = styled(\"div\")`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 10px 5px;\r\n  margin-bottom: -0.625rem;\r\n`;\r\n\r\nexport const StyledTextArea = styled(\"textarea\")`\r\n  resize: none;\r\n  font-size: 0.875rem;\r\n  height: 185px;\r\n`;\r\n\r\nexport const Label = styled(\"label\")`\r\n  display: block;\r\n  padding-bottom: 10px;\r\n  text-transform: capitalize;\r\n`;\r\n","import { withTranslation } from \"react-i18next\";\r\nimport { Container, StyledInput } from \"./styles\";\r\nimport { Label } from \"../TextArea/styles\";\r\nimport { InputProps } from \"../types\";\r\n\r\nconst Input = ({ name, placeholder, onChange, t }: InputProps) => (\r\n  <Container>\r\n    <Label htmlFor={name}>{t(placeholder)}</Label>\r\n    <StyledInput\r\n      placeholder={t(placeholder)}\r\n      name={name}\r\n      id={name}\r\n      onChange={onChange}\r\n    />\r\n  </Container>\r\n);\r\n\r\nexport default withTranslation()(Input);\r\n","import { initializeApp } from 'firebase/app';\nimport { getAnalytics } from 'firebase/analytics';\nimport { getFirestore } from 'firebase/firestore';\nimport { getAuth } from 'firebase/auth';\nimport { getStorage } from 'firebase/storage';\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n  measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\n// Initialize services\nconst analytics = getAnalytics(app);\nconst db = getFirestore(app);\nconst auth = getAuth(app);\nconst storage = getStorage(app);\n\nexport { app, analytics, db, auth, storage }; ","import { useState } from \"react\";\r\nimport { notification } from \"antd\";\r\nimport { db } from \"../../config/firebase\";\r\nimport { collection, addDoc, serverTimestamp } from 'firebase/firestore';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\ninterface IContactValues {\r\n  name?: string;\r\n  contactNumber?: string;\r\n}\r\n\r\ninterface IRegistrationValues {\r\n  name?: string;\r\n  email?: string;\r\n  age?: string;\r\n  standard?: string;\r\n  gender?: string;\r\n  subject?: string;\r\n  institution?: string;\r\n  yearOfStudy?: string;\r\n  yearOfCompletion?: string;\r\n  district?: string;\r\n  otherDistrict?: string;\r\n  localBody?: string;\r\n  contactNumber?: string;\r\n  whatsappNumber?: string;\r\n  isDifferentWhatsApp?: string;\r\n}\r\n\r\nconst initialRegistrationValues: IRegistrationValues = {\r\n  name: \"\",\r\n  email: \"\",\r\n  age: \"\",\r\n  standard: \"\",\r\n  gender: \"\",\r\n  subject: \"\",\r\n  institution: \"\",\r\n  yearOfStudy: \"\",\r\n  yearOfCompletion: \"\",\r\n  district: \"\",\r\n  otherDistrict: \"\",\r\n  localBody: \"\",\r\n  contactNumber: \"\",\r\n  whatsappNumber: \"\",\r\n  isDifferentWhatsApp: 'no',\r\n};\r\n\r\nconst initialContactValues: IContactValues = {\r\n  name: \"\",\r\n  contactNumber: \"\",\r\n};\r\n\r\nexport const useForm = <T extends IRegistrationValues | IContactValues>(\r\n  validate: (values: T) => T,\r\n  formType: 'registration' | 'contact' = 'registration'\r\n) => {\r\n  const history = useHistory();\r\n  const [formState, setFormState] = useState<{\r\n    values: T;\r\n    errors: T;\r\n  }>({\r\n    values: (formType === 'registration' ? initialRegistrationValues : initialContactValues) as T,\r\n    errors: (formType === 'registration' ? initialRegistrationValues : initialContactValues) as T,\r\n  });\r\n\r\n  const scrollToTop = () => {\r\n    window.scrollTo({\r\n      top: 0,\r\n      behavior: 'smooth'\r\n    });\r\n  };\r\n\r\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    const values = formState.values;\r\n    const errors = validate(values);\r\n    setFormState((prevState) => ({ ...prevState, errors }));\r\n\r\n    try {\r\n      if (Object.values(errors).every((error) => error === \"\")) {\r\n        // Add registration data to Firestore\r\n        const registrationsRef = collection(db, 'registrations');\r\n        await addDoc(registrationsRef, {\r\n          ...values,\r\n          timestamp: serverTimestamp()\r\n        });\r\n\r\n        // Reset form state\r\n        setFormState({\r\n          values: (formType === 'registration' ? { ...initialRegistrationValues } : { ...initialContactValues }) as T,\r\n          errors: (formType === 'registration' ? { ...initialRegistrationValues } : { ...initialContactValues }) as T,\r\n        });\r\n\r\n        // Scroll to top first\r\n        scrollToTop();\r\n\r\n        // Show success notification after scrolling\r\n        setTimeout(() => {\r\n          notification[\"success\"]({\r\n            message: \"Registration Successful\",\r\n            description: \"Thank you for registering! We'll contact you soon.\",\r\n            duration: 3,\r\n          });\r\n        }, 500);\r\n\r\n        // Redirect to home page after notification\r\n        setTimeout(() => {\r\n          history.push('/');\r\n        }, 2500);\r\n      }\r\n    } catch (error) {\r\n      console.error('Registration error:', error);\r\n      notification[\"error\"]({\r\n        message: \"Error\",\r\n        description: \"Failed to submit registration. Please try again later.\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleChange = (\r\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement> | { target: { name: string; value: string } }\r\n  ) => {\r\n    const { name, value } = event.target;\r\n    setFormState((prevState) => ({\r\n      ...prevState,\r\n      values: {\r\n        ...prevState.values,\r\n        [name]: value,\r\n      },\r\n      errors: {\r\n        ...prevState.errors,\r\n        [name]: \"\",\r\n      },\r\n    }));\r\n  };\r\n\r\n  const handleContact = async (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    const values = formState.values;\r\n    const errors = validate(values);\r\n    setFormState((prevState) => ({ ...prevState, errors }));\r\n\r\n    try {\r\n      if (Object.values(errors).every((error) => error === \"\")) {\r\n        // Add contact message to Firestore\r\n        const contactsRef = collection(db, 'contacts');\r\n        await addDoc(contactsRef, {\r\n          name: values.name,\r\n          contactNumber: values.contactNumber,\r\n          timestamp: serverTimestamp()\r\n        });\r\n\r\n        // Reset form state\r\n        setFormState({\r\n          values: { ...initialContactValues } as T,\r\n          errors: { ...initialContactValues } as T,\r\n        });\r\n\r\n        // Show success notification\r\n        notification[\"success\"]({\r\n          message: \"Message Sent\",\r\n          description: \"Thank you for contacting us! We'll get back to you soon.\",\r\n          duration: 3,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('Contact form error:', error);\r\n      notification[\"error\"]({\r\n        message: \"Error\",\r\n        description: \"Failed to send message. Please try again later.\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return {\r\n    handleChange,\r\n    handleSubmit,\r\n    handleContact,\r\n    values: formState.values,\r\n    errors: formState.errors,\r\n  };\r\n};\r\n","import { RegisterValues } from \"../../components/RegisterForm/types\";\r\n\r\nconst validate = (values: RegisterValues): RegisterValues => {\r\n  let errors: RegisterValues = {};\r\n  \r\n  if (!values.name) {\r\n    errors.name = \"Name is required\";\r\n  }\r\n\r\n  if (!values.gender) {\r\n    errors.gender = \"Gender is required\";\r\n  }\r\n\r\n  if (!values.age) {\r\n    errors.age = \"Age is required\";\r\n  } else if (isNaN(Number(values.age)) || Number(values.age) < 0) {\r\n    errors.age = \"Please enter a valid age\";\r\n  }\r\n\r\n  if (!values.email) {\r\n    errors.email = \"Email address is required\";\r\n  } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\r\n    errors.email = \"Email address is invalid\";\r\n  }\r\n\r\n  if (!values.contactNumber) {\r\n    errors.contactNumber = \"Contact number is required\";\r\n  } else if (!/^\\d{10}$/.test(values.contactNumber)) {\r\n    errors.contactNumber = \"Please enter a valid 10-digit number\";\r\n  }\r\n\r\n  if (values.whatsappNumber && !/^\\d{10}$/.test(values.whatsappNumber)) {\r\n    errors.whatsappNumber = \"Please enter a valid 10-digit number\";\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const validateContact = (values: any) => {\r\n  let errors: any = {};\r\n\r\n  if (!values.name) {\r\n    errors.name = \"Name is required\";\r\n  }\r\n  if (!values.contactNumber) {\r\n    errors.contactNumber = \"Contact number is required\";\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport default validate;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Content = styled(\"p\")`\r\n  margin-top: 1.5rem;\r\n`;\r\n\r\nexport const Container = styled(\"div\")`\r\n  position: relative;\r\n  max-width: 700px;\r\n`;\r\n\r\nexport const TextWrapper = styled(\"div\")`\r\n  border-radius: 3rem;\r\n  max-width: 400px;\r\n`;\r\n","import { withTranslation, TFunction } from \"react-i18next\";\r\nimport { Container, TextWrapper, Content } from \"./styles\";\r\n\r\ninterface Props {\r\n  title: string;\r\n  content: string;\r\n  t: TFunction;\r\n}\r\n\r\nconst Block = ({ title, content, t }: Props) => {\r\n  return (\r\n    <Container>\r\n      <h6>{t(title)}</h6>\r\n      <TextWrapper>\r\n        <Content>{t(content)}</Content>\r\n      </TextWrapper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(Block);\r\n","import styled from \"styled-components\";\r\n\r\nexport const ContactContainer = styled(\"div\")`\r\n  padding: 5rem 0;\r\n\r\n  @media only screen and (max-width: 1024px) {\r\n    padding: 3rem 0;\r\n  }\r\n`;\r\n\r\nexport const FormGroup = styled(\"form\")`\r\n  width: 100%;\r\n  max-width: 520px;\r\n\r\n  @media only screen and (max-width: 1045px) {\r\n    max-width: 100%;\r\n    margin-top: 2rem;\r\n  }\r\n`;\r\n\r\nexport const Span = styled(\"span\")`\r\n  display: block;\r\n  font-weight: 600;\r\n  color: rgba(36,182,200,255);\r\n  height: 0.775rem;\r\n  padding: 0 0.675rem;\r\n`;\r\n\r\nexport const ButtonContainer = styled(\"div\")`\r\n  text-align: end;\r\n  position: relative;\r\n\r\n  @media only screen and (max-width: 414px) {\r\n    padding-top: 0.75rem;\r\n  }\r\n`;\r\n","import { Row, Col } from \"antd\";\r\nimport { withTranslation } from \"react-i18next\";\r\nimport { Slide } from \"react-awesome-reveal\";\r\nimport { ContactProps, ValidationTypeProps } from \"./types\";\r\nimport { useForm } from \"../../common/utils/useForm\";\r\nimport { validateContact } from \"../../common/utils/validationRules\";\r\nimport { Button } from \"../../common/Button\";\r\nimport Block from \"../Block\";\r\nimport Input from \"../../common/Input\";\r\nimport { ContactContainer, FormGroup, Span, ButtonContainer } from \"./styles\";\r\n\r\nconst Contact = ({ title, content, id, t }: ContactProps) => {\r\n  const { values, errors, handleChange, handleContact } = useForm(validateContact, 'contact');\r\n\r\n  const ValidationType = ({ type }: ValidationTypeProps) => {\r\n    const ErrorMessage = errors[type as keyof typeof errors];\r\n    return <Span>{ErrorMessage}</Span>;\r\n  };\r\n\r\n  return (\r\n    <ContactContainer id={id}>\r\n      <Row justify=\"space-between\" align=\"middle\">\r\n        <Col lg={12} md={11} sm={24} xs={24}>\r\n          <Slide direction=\"left\" triggerOnce>\r\n            <Block title={title} content={content} />\r\n          </Slide>\r\n        </Col>\r\n        <Col lg={12} md={12} sm={24} xs={24}>\r\n          <Slide direction=\"right\" triggerOnce>\r\n            <FormGroup autoComplete=\"off\" onSubmit={handleContact}>\r\n              <Col span={24}>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  placeholder=\"Your Name\"\r\n                  value={values.name || \"\"}\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"name\" />\r\n              </Col>\r\n              <Col span={24}>\r\n                <Input\r\n                  type=\"tel\"\r\n                  name=\"contactNumber\"\r\n                  placeholder=\"Your Contact\"\r\n                  value={values.contactNumber || \"\"}\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"contactNumber\" />\r\n              </Col>\r\n              <ButtonContainer>\r\n                <Button name=\"submit\">{t(\"Submit\")}</Button>\r\n              </ButtonContainer>\r\n            </FormGroup>\r\n          </Slide>\r\n        </Col>\r\n      </Row>\r\n    </ContactContainer>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(Contact);\r\n"],"names":["Container","styled","_templateObject","_taggedTemplateLiteral","StyledInput","_templateObject2","Label","_templateObject3","withTranslation","_ref","name","placeholder","onChange","t","_jsxs","children","_jsx","htmlFor","id","app","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","db","getAnalytics","getFirestore","getAuth","getStorage","initialRegistrationValues","email","age","standard","gender","subject","institution","yearOfStudy","yearOfCompletion","district","otherDistrict","localBody","contactNumber","whatsappNumber","isDifferentWhatsApp","initialContactValues","useForm","validate","formType","arguments","length","undefined","history","useHistory","formState","setFormState","useState","values","errors","handleChange","event","value","target","prevState","_objectSpread","handleSubmit","async","preventDefault","Object","every","error","registrationsRef","collection","addDoc","timestamp","serverTimestamp","window","scrollTo","top","behavior","setTimeout","notification","message","description","duration","push","console","handleContact","contactsRef","validateContact","isNaN","Number","test","Content","TextWrapper","title","content","ContactContainer","FormGroup","Span","ButtonContainer","_templateObject4","ValidationType","_ref2","type","ErrorMessage","Row","justify","align","Col","lg","md","sm","xs","Slide","direction","triggerOnce","Block","autoComplete","onSubmit","span","Input","Button"],"sourceRoot":""}