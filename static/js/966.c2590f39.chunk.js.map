{"version":3,"file":"static/js/966.c2590f39.chunk.js","mappings":"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","sources":["pages/Admin/index.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { Table, Tabs, message } from 'antd';\nimport { collection, query, getDocs, orderBy } from 'firebase/firestore';\nimport { db } from '../../config/firebase';\nimport Container from '../../common/Container';\nimport styled from 'styled-components';\n\nconst { TabPane } = Tabs;\n\nconst AdminContainer = styled(Container)`\n  padding-top: 100px;\n  min-height: calc(100vh - 100px);\n`;\n\nconst TableContainer = styled.div`\n  background: white;\n  padding: 24px;\n  border-radius: 8px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n`;\n\ninterface Registration {\n  id: string;\n  name: string;\n  email: string;\n  contactNumber: string;\n  district: string;\n  institution: string;\n  timestamp: string;\n  [key: string]: any;\n}\n\ninterface Contact {\n  id: string;\n  name: string;\n  contactNumber: string;\n  timestamp: string;\n  [key: string]: any;\n}\n\nconst Admin = () => {\n  const [registrations, setRegistrations] = useState<Registration[]>([]);\n  const [contacts, setContacts] = useState<Contact[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  const fetchData = async () => {\n    try {\n      // Fetch registrations\n      const registrationsQuery = query(\n        collection(db, 'registrations'),\n        orderBy('timestamp', 'desc')\n      );\n      const registrationsSnapshot = await getDocs(registrationsQuery);\n      const registrationsData = registrationsSnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data(),\n        timestamp: doc.data().timestamp?.toDate().toLocaleString() || 'N/A'\n      })) as Registration[];\n\n      // Fetch contacts\n      const contactsQuery = query(\n        collection(db, 'contacts'),\n        orderBy('timestamp', 'desc')\n      );\n      const contactsSnapshot = await getDocs(contactsQuery);\n      const contactsData = contactsSnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data(),\n        timestamp: doc.data().timestamp?.toDate().toLocaleString() || 'N/A'\n      })) as Contact[];\n\n      setRegistrations(registrationsData);\n      setContacts(contactsData);\n    } catch (error) {\n      message.error('Failed to fetch data');\n      console.error('Error fetching data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const registrationColumns = [\n    { title: 'Name', dataIndex: 'name', key: 'name' },\n    { title: 'Email', dataIndex: 'email', key: 'email' },\n    { title: 'Contact', dataIndex: 'contactNumber', key: 'contactNumber' },\n    { title: 'District', dataIndex: 'district', key: 'district' },\n    { title: 'Institution', dataIndex: 'institution', key: 'institution' },\n    { title: 'Timestamp', dataIndex: 'timestamp', key: 'timestamp' },\n  ];\n\n  const contactColumns = [\n    { title: 'Name', dataIndex: 'name', key: 'name' },\n    { title: 'Contact Number', dataIndex: 'contactNumber', key: 'contactNumber' },\n    { title: 'Timestamp', dataIndex: 'timestamp', key: 'timestamp' },\n  ];\n\n  return (\n    <AdminContainer>\n      <h1>Admin Dashboard</h1>\n      <TableContainer>\n        <Tabs defaultActiveKey=\"1\">\n          <TabPane tab=\"Registrations\" key=\"1\">\n            <Table\n              dataSource={registrations}\n              columns={registrationColumns}\n              loading={loading}\n              rowKey=\"id\"\n              scroll={{ x: true }}\n            />\n          </TabPane>\n          <TabPane tab=\"Contacts\" key=\"2\">\n            <Table\n              dataSource={contacts}\n              columns={contactColumns}\n              loading={loading}\n              rowKey=\"id\"\n              scroll={{ x: true }}\n            />\n          </TabPane>\n        </Tabs>\n      </TableContainer>\n    </AdminContainer>\n  );\n};\n\nexport default Admin; "],"names":["TabPane","Tabs","AdminContainer","styled","Container","_templateObject","_taggedTemplateLiteral","TableContainer","div","_templateObject2","Admin","registrations","setRegistrations","useState","contacts","setContacts","loading","setLoading","useEffect","async","registrationsQuery","query","collection","db","orderBy","registrationsData","getDocs","docs","map","doc","_doc$data$timestamp","_objectSpread","id","data","timestamp","toDate","toLocaleString","contactsQuery","contactsData","_doc$data$timestamp2","error","message","console","fetchData","_jsxs","children","_jsx","defaultActiveKey","tab","Table","dataSource","columns","title","dataIndex","key","rowKey","scroll","x"],"sourceRoot":""}