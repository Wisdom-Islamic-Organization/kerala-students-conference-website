{"version":3,"file":"static/js/669.18970079.chunk.js","mappings":"oMAEO,MAAMA,EAAgBC,EAAAA,GAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,oPAc1BC,EAAmBJ,EAAAA,GAAOC,IAAGI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,yFAQ7BG,EAAkBN,EAAAA,GAAOO,IAAGC,IAAAA,GAAAL,EAAAA,EAAAA,GAAA,8HAU5BM,EAAUT,EAAAA,GAAOC,IAAGS,IAAAA,GAAAP,EAAAA,EAAAA,GAAA,yJASpBQ,EAAiBX,EAAAA,GAAOC,IAAGW,IAAAA,GAAAT,EAAAA,EAAAA,GAAA,wIAS3BU,EAAQb,EAAAA,GAAOc,GAAEC,IAAAA,GAAAZ,EAAAA,EAAAA,GAAA,wSAejBa,EAAchB,EAAAA,GAAOiB,EAACC,IAAAA,GAAAf,EAAAA,EAAAA,GAAA,2SAetBgB,EAAWnB,EAAAA,GAAOiB,EAACG,IAAAA,GAAAjB,EAAAA,EAAAA,GAAA,wSAenBkB,EAAcrB,EAAAA,GAAOC,IAAGqB,IAAAA,GAAAnB,EAAAA,EAAAA,GAAA,8VAOvBoB,GAAyB,gBAAhBA,EAAMC,MAA0B,iBAAmB,S,sBCvF1E,MAoEA,GAAeC,EAAAA,EAAAA,IAAf,EApEkBC,IAAkF,IAAjF,MAAEC,EAAK,SAAEC,EAAQ,YAAEC,EAAW,QAAEC,EAAO,iBAAEC,GAAkCL,EAC5F,MAAOM,EAAmBC,IAAwBC,EAAAA,EAAAA,UAAS,IAE3DC,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAWC,aAAY,KAC3BJ,GAAsBK,GACpBA,IAAcP,EAAiBQ,OAAS,EAAI,EAAID,EAAY,GAC7D,GACA,KAEH,MAAO,IAAME,cAAcJ,EAAS,GACnC,CAACL,EAAiBQ,SAsBrB,OACEE,EAAAA,EAAAA,MAAC1C,EAAa,CAAC2C,GAAG,OAAMC,SAAA,EACtBC,EAAAA,EAAAA,KAACxC,EAAgB,CAAAuC,SACdZ,EAAiBc,KAAI,CAACC,EAAOC,KAC5BH,EAAAA,EAAAA,KAACtC,EAAe,CAEd0C,KAAKC,EAAAA,EAAAA,GAAaH,GAClBI,MAAO,CACLC,QAASJ,IAAUf,EAAoB,EAAI,EAC3CoB,WAAY,2BAJTL,QASXH,EAAAA,EAAAA,KAACnC,EAAO,KACRgC,EAAAA,EAAAA,MAAC9B,EAAc,CAAAgC,SAAA,EACbC,EAAAA,EAAAA,KAAC/B,EAAK,CAAA8B,SAAEhB,IACPC,IAAYgB,EAAAA,EAAAA,KAACzB,EAAQ,CAAAwB,SAAEf,IACvBC,IAAee,EAAAA,EAAAA,KAAC5B,EAAW,CAAA2B,SAAEd,KAC9Be,EAAAA,EAAAA,KAACvB,EAAW,CAAAsB,SACTb,EAAQe,KAAI,CAACQ,EAAQN,KACpBH,EAAAA,EAAAA,KAACU,EAAAA,EAAM,CAEL9B,MAAO6B,EAAO7B,MACd+B,QAASA,IA5CAC,KACnB,GAAIA,EAAKC,WAAW,KAElBC,OAAOC,SAASC,KAAOJ,OAClB,GAAIA,EAAKC,WAAW,KAAM,CAE/B,MAAMI,EAAUC,SAASC,eAAeP,EAAKQ,UAAU,IACvD,GAAIH,EAAS,CACX,MAAMI,EAAe,GAEfC,EADkBL,EAAQM,wBAAwBC,IACfV,OAAOW,YAAcJ,EAE9DP,OAAOY,SAAS,CACdF,IAAKF,EACLK,SAAU,UAEd,CACF,GA2ByBC,CAAYnB,EAAOG,MAAMb,SAEvCU,EAAO1B,OAJHoB,YASC,G","sources":["components/HeroBlock/styles.ts","components/HeroBlock/index.tsx"],"sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const HeroContainer = styled.div`\r\n  position: relative;\r\n  height: 100vh;\r\n  min-height: 100vh;\r\n  width: 100%;\r\n  overflow: hidden;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin-top: 0;\r\n  padding-top: 0;\r\n  box-sizing: border-box;\r\n`;\r\n\r\nexport const BackgroundSlider = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\n\r\nexport const BackgroundImage = styled.img`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n  opacity: 0;\r\n`;\r\n\r\nexport const Overlay = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgba(0, 0, 0, 0.5); // Adjust opacity here\r\n`;\r\n\r\nexport const ContentWrapper = styled.div`\r\n  position: relative;\r\n  z-index: 2;\r\n  text-align: center;\r\n  padding: 60px 20px 0;\r\n  max-width: 800px;\r\n  margin: 0 auto;\r\n`;\r\n\r\nexport const Title = styled.h1`\r\n  font-family: \"ML TT Thunchan\", \"Manjari\", \"Noto Sans Malayalam\", system-ui;\r\n  color: #ffffff;\r\n  font-size: 4rem;\r\n  margin-bottom: 1rem;\r\n\r\n  @media screen and (max-width: 768px) {\r\n    font-size: 2.5rem;\r\n  }\r\n\r\n  @media screen and (max-width: 480px) {\r\n    font-size: 2rem;\r\n  }\r\n`;\r\n\r\nexport const Description = styled.p`\r\n  font-family: \"ML TT Thunchan\", \"Manjari\", \"Noto Sans Malayalam\", system-ui;\r\n  color: #ffffff;\r\n  font-size: 1.5rem;\r\n  margin-bottom: 1rem;\r\n\r\n  @media screen and (max-width: 768px) {\r\n    font-size: 1.25rem;\r\n  }\r\n\r\n  @media screen and (max-width: 480px) {\r\n    font-size: 1rem;\r\n  }\r\n`;\r\n\r\nexport const Subtitle = styled.p`\r\n  font-family: \"ML TT Thunchan\", \"Manjari\", \"Noto Sans Malayalam\", system-ui;\r\n  color: #ffffff;\r\n  font-size: 2rem;\r\n  font-weight: 700;\r\n\r\n  @media screen and (max-width: 768px) {\r\n    font-size: 1.5rem;\r\n  }\r\n\r\n  @media screen and (max-width: 480px) {\r\n    font-size: 1.25rem;\r\n  }\r\n`;\r\n\r\nexport const ButtonGroup = styled.div`\r\n  display: flex;\r\n  gap: 1rem;\r\n  justify-content: center;\r\n  \r\n  button {\r\n    color: #fff;\r\n    border: ${props => props.color === 'transparent' ? '2px solid #fff' : 'none'};\r\n    \r\n    &:hover {\r\n      color: #fff;\r\n      opacity: 0.9;\r\n    }\r\n  }\r\n  \r\n  @media screen and (max-width: 480px) {\r\n    flex-direction: column;\r\n    align-items: center;\r\n    \r\n    button {\r\n      width: 200px;\r\n    }\r\n  }\r\n`;\r\n","import { useState, useEffect } from \"react\";\r\nimport { withTranslation } from \"react-i18next\";\r\nimport { Button } from \"../../common/Button\";\r\nimport {\r\n  HeroContainer,\r\n  BackgroundSlider,\r\n  BackgroundImage,\r\n  Overlay,\r\n  ContentWrapper,\r\n  Title,\r\n  Subtitle,\r\n  Description,\r\n  ButtonGroup\r\n} from \"./styles\";\r\nimport { HeroBlockProps } from \"./types\";\r\nimport { getAssetPath } from \"../../utils/paths\";\r\n\r\nconst HeroBlock = ({ title, subtitle, description, buttons, backgroundImages }: HeroBlockProps) => {\r\n  const [currentImageIndex, setCurrentImageIndex] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setCurrentImageIndex((prevIndex) => \r\n        prevIndex === backgroundImages.length - 1 ? 0 : prevIndex + 1\r\n      );\r\n    }, 3000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [backgroundImages.length]);\r\n\r\n  const handleClick = (link: string) => {\r\n    if (link.startsWith('/')) {\r\n      // Route navigation\r\n      window.location.hash = link;\r\n    } else if (link.startsWith('#')) {\r\n      // Smooth scroll to section\r\n      const element = document.getElementById(link.substring(1));\r\n      if (element) {\r\n        const headerOffset = 80;\r\n        const elementPosition = element.getBoundingClientRect().top;\r\n        const offsetPosition = elementPosition + window.pageYOffset - headerOffset;\r\n\r\n        window.scrollTo({\r\n          top: offsetPosition,\r\n          behavior: \"smooth\"\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <HeroContainer id=\"hero\">\r\n      <BackgroundSlider>\r\n        {backgroundImages.map((image, index) => (\r\n          <BackgroundImage \r\n            key={index}\r\n            src={getAssetPath(image)}\r\n            style={{\r\n              opacity: index === currentImageIndex ? 1 : 0,\r\n              transition: 'opacity 1s ease-in-out'\r\n            }}\r\n          />\r\n        ))}\r\n      </BackgroundSlider>\r\n      <Overlay />\r\n      <ContentWrapper>\r\n        <Title>{title}</Title>\r\n        {subtitle && <Subtitle>{subtitle}</Subtitle>}\r\n        {description && <Description>{description}</Description>}\r\n        <ButtonGroup>\r\n          {buttons.map((button, index) => (\r\n            <Button\r\n              key={index}\r\n              color={button.color}\r\n              onClick={() => handleClick(button.link)}\r\n            >\r\n              {button.title}\r\n            </Button>\r\n          ))}\r\n        </ButtonGroup>\r\n      </ContentWrapper>\r\n    </HeroContainer>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(HeroBlock);\r\n"],"names":["HeroContainer","styled","div","_templateObject","_taggedTemplateLiteral","BackgroundSlider","_templateObject2","BackgroundImage","img","_templateObject3","Overlay","_templateObject4","ContentWrapper","_templateObject5","Title","h1","_templateObject6","Description","p","_templateObject7","Subtitle","_templateObject8","ButtonGroup","_templateObject9","props","color","withTranslation","_ref","title","subtitle","description","buttons","backgroundImages","currentImageIndex","setCurrentImageIndex","useState","useEffect","interval","setInterval","prevIndex","length","clearInterval","_jsxs","id","children","_jsx","map","image","index","src","getAssetPath","style","opacity","transition","button","Button","onClick","link","startsWith","window","location","hash","element","document","getElementById","substring","headerOffset","offsetPosition","getBoundingClientRect","top","pageYOffset","scrollTo","behavior","handleClick"],"sourceRoot":""}